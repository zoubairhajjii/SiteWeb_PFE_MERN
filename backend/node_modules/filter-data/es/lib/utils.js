import { transduce, filter, curry, complement, allPass, anyPass, drop, take, path, } from 'ramda';
// use impure combiner to speed up
function listCombiner(list, val) {
    list.push(val);
    return list;
}
// use self-made compose to avoid typescript error
function compose(...fns) {
    return (...args) => fns.reduceRight((prevBC, fn) => {
        if (!Array.isArray(prevBC)) {
            // eslint-disable-next-line no-param-reassign
            prevBC = [prevBC];
        }
        return fn(...prevBC);
    }, args);
}
function getObjValue(data, key) {
    return path(typeof key === 'string' ? key.split('.') : key, data);
}
export { listCombiner, compose, transduce, filter, curry, complement, allPass, anyPass, drop, take, getObjValue, };
//# sourceMappingURL=utils.js.map