"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./lib/utils");
var filters_1 = __importDefault(require("./filters"));
var targetValueNull_1 = __importDefault(require("./prefilters/targetValueNull"));
var optionsDefault = {
    caseSensitive: false,
    includeNull: false,
};
function makeSinglePredicator(searchCondition, options, curriedFilter) {
    var partialPredicator = curriedFilter(searchCondition, options.caseSensitive);
    var predicator = (0, targetValueNull_1.default)(options.includeNull, searchCondition, partialPredicator);
    return predicator;
}
/**
 *
 * @param {*array} allData: Array of object
 * @param {*array} searchConditions
 * @param {*object} optionsIn: { caseSensitive: false, includeNull: false, offset: undefined, limit: undefined }
 */
function filterData(allData, searchConditions, optionsIn) {
    if (optionsIn === void 0) { optionsIn = {}; }
    var searchConditionsValNotEmpty = searchConditions.filter(function (_a) {
        var value = _a.value;
        return value !== '' && value != null;
    });
    // return directly when no conditions available
    if (searchConditionsValNotEmpty.length === 0) {
        return __spreadArray([], allData, true);
    }
    var options = __assign(__assign({}, optionsDefault), optionsIn);
    var dataFilters = searchConditionsValNotEmpty.map(function (searchCondition) {
        var key = searchCondition.key, type = searchCondition.type;
        // get partial function
        var curriedFilter = (0, utils_1.curry)(filters_1.default[type]);
        // target key is one
        var predicator;
        if (typeof key === 'string') {
            predicator = makeSinglePredicator(searchCondition, options, curriedFilter);
        }
        else {
            // or search for multiple keys
            predicator = (0, utils_1.anyPass)(key.map(function (oneKey) {
                return makeSinglePredicator({
                    key: oneKey,
                    value: searchCondition.value,
                    type: searchCondition.type,
                }, options, curriedFilter);
            }));
        }
        return (0, utils_1.filter)(predicator);
    });
    // pagination
    if (options.offset != null && options.limit != null) {
        dataFilters.push((0, utils_1.drop)(options.offset));
        dataFilters.push((0, utils_1.take)(options.limit));
    }
    var filtersTrans = utils_1.compose.apply(void 0, dataFilters);
    return (0, utils_1.transduce)(filtersTrans, utils_1.listCombiner, [], allData);
}
exports.default = filterData;
//# sourceMappingURL=filterData.js.map