"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getObjValue = exports.take = exports.drop = exports.anyPass = exports.allPass = exports.complement = exports.curry = exports.filter = exports.transduce = exports.compose = exports.listCombiner = void 0;
var ramda_1 = require("ramda");
Object.defineProperty(exports, "transduce", { enumerable: true, get: function () { return ramda_1.transduce; } });
Object.defineProperty(exports, "filter", { enumerable: true, get: function () { return ramda_1.filter; } });
Object.defineProperty(exports, "curry", { enumerable: true, get: function () { return ramda_1.curry; } });
Object.defineProperty(exports, "complement", { enumerable: true, get: function () { return ramda_1.complement; } });
Object.defineProperty(exports, "allPass", { enumerable: true, get: function () { return ramda_1.allPass; } });
Object.defineProperty(exports, "anyPass", { enumerable: true, get: function () { return ramda_1.anyPass; } });
Object.defineProperty(exports, "drop", { enumerable: true, get: function () { return ramda_1.drop; } });
Object.defineProperty(exports, "take", { enumerable: true, get: function () { return ramda_1.take; } });
// use impure combiner to speed up
function listCombiner(list, val) {
    list.push(val);
    return list;
}
exports.listCombiner = listCombiner;
// use self-made compose to avoid typescript error
function compose() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return fns.reduceRight(function (prevBC, fn) {
            if (!Array.isArray(prevBC)) {
                // eslint-disable-next-line no-param-reassign
                prevBC = [prevBC];
            }
            return fn.apply(void 0, prevBC);
        }, args);
    };
}
exports.compose = compose;
function getObjValue(data, key) {
    return (0, ramda_1.path)(typeof key === 'string' ? key.split('.') : key, data);
}
exports.getObjValue = getObjValue;
//# sourceMappingURL=utils.js.map